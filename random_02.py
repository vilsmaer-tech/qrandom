import os
import random
import secrets
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chisquare
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
N_MAX = 1000          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (1..1000)
NUM_TRIALS = 10       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
SHOW_PLOT = True      # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
SAVE_PLOT = True      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –ø–∞–ø–∫–µ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º

print("üöÄ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–ï–ù–ï–†–ê–¢–û–†–û–í –°–õ–£–ß–ê–ô–ù–´–• –ß–ò–°–ï–õ")
print(f"–ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç—ã –æ—Ç 1 –¥–æ {N_MAX} —à—Ç—É–∫, {NUM_TRIALS} –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∫–∞–∂–¥–∞—è.\n")

# --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ---
def prng_flip(n):
    """Python random (PRNG)"""
    return [random.randint(0, 1) for _ in range(n)]

def trng_flip(n):
    """secrets.token_bytes() ‚Üí TRNG (CSPRNG –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã)"""
    n_bytes = (n + 7) // 8
    bytes_data = secrets.token_bytes(n_bytes)
    bits = []
    for byte in bytes_data:
        for i in range(8):
            if len(bits) >= n:
                break
            bits.append((byte >> i) & 1)
    return bits[:n]

def numpy_prng_flip(n):
    """NumPy PRNG (Mersenne Twister)"""
    return np.random.randint(0, 2, size=n).tolist()

def os_urandom_flip(n):
    """os.urandom() ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–π TRNG (–∞–Ω–∞–ª–æ–≥ /dev/urandom)"""
    n_bytes = (n + 7) // 8
    bytes_data = os.urandom(n_bytes)
    bits = []
    for byte in bytes_data:
        for i in range(8):
            if len(bits) >= n:
                break
            bits.append((byte >> i) & 1)
    return bits[:n]

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ---
def calculate_stats(flips):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Å—Å–∏–≤—É –±—Ä–æ—Å–∫–æ–≤ (0=–æ—Ä—ë–ª, 1=—Ä–µ—à–∫–∞)"""
    if len(flips) == 0:
        raise ValueError("Cannot calculate stats on empty list")

    flips = np.array(flips)
    mean = np.mean(flips)
    std = np.std(flips)
    chi2_stat, p_val = chisquare([np.sum(flips == 0), np.sum(flips == 1)])
    deviation = abs(mean - 0.5)
    return {
        'mean': mean,
        'std': std,
        'chi2_stat': chi2_stat,
        'p_value': p_val,
        'deviation': deviation
    }

def calculate_autocorrelation(flips, max_lag=10):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0/1)"""
    if len(flips) < max_lag + 1:
        return [0.0] * max_lag, [1.0] * max_lag

    flips = np.array(flips, dtype=float)
    mean = np.mean(flips)
    var = np.var(flips)

    if var == 0:  # –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        return [0.0] * max_lag, [1.0] * max_lag

    autocorr_vals = []
    for lag in range(1, max_lag + 1):
        # –°–¥–≤–∏–≥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ lag
        x1 = flips[:-lag]
        x2 = flips[lag:]
        # –°—á–∏—Ç–∞–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é
        cov = np.mean((x1 - mean) * (x2 - mean))
        r = cov / var  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        autocorr_vals.append(r)

    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ p-value: –µ—Å–ª–∏ |r| > 0.3 ‚Äî –∑–Ω–∞—á–∏–º–æ (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞)
    pvals = [1.0 if abs(r) < 0.3 else 0.01 for r in autocorr_vals]

    return autocorr_vals, pvals

def calculate_histogram(flips):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –æ—Ä–ª–∞/—Ä–µ—à–∫–∏"""
    counts = np.bincount(flips, minlength=2)
    return counts / len(flips)  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
generators = {
    'PRNG (random)': prng_flip,
    'TRNG (secrets)': trng_flip,
    'PRNG (numpy)': numpy_prng_flip,
    'TRNG (os.urandom)': os_urandom_flip
}

results = {name: {'mean': [], 'std': [], 'deviation': [], 'chi2_stat': [], 'p_value': [], 'autocorr_avg': [], 'pval_avg': []} for name in generators}
histograms = {name: [] for name in generators}  # —Ö—Ä–∞–Ω–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è N=1000

print("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –∑–∞–π–º—ë—Ç 1‚Äì4 –º–∏–Ω—É—Ç—ã.")
for name, generator in generators.items():
    print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ {name}...")
    for n in range(1, N_MAX + 1):
        if n % 100 == 0 and n == 100:
            print(f"    {name}: {n}/{N_MAX}")

        means = []
        deviations = []
        chi2_stats = []
        p_values = []
        autocorr_avgs = []
        pval_avgs = []

        for _ in range(NUM_TRIALS):
            flips = generator(n)
            stats = calculate_stats(flips)
            means.append(stats['mean'])
            deviations.append(stats['deviation'])
            chi2_stats.append(stats['chi2_stat'])
            p_values.append(stats['p_value'])

            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è n >= 20, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
            if n >= 20:
                autocorr_vals, pvals = calculate_autocorrelation(flips, max_lag=10)
                autocorr_avgs.append(np.mean(np.abs(autocorr_vals)))  # —Å—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                pval_avgs.append(np.mean(pvals))  # —Å—Ä–µ–¥–Ω–∏–π p-value –ø–æ –ª–∞–≥–∞–º
            else:
                autocorr_avgs.append(0.0)
                pval_avgs.append(1.0)

        # –£—Å—Ä–µ–¥–Ω—è–µ–º
        results[name]['mean'].append(np.mean(means))
        results[name]['deviation'].append(np.mean(deviations))
        results[name]['chi2_stat'].append(np.mean(chi2_stats))
        results[name]['p_value'].append(np.mean(p_values))
        results[name]['autocorr_avg'].append(np.mean(autocorr_avgs))
        results[name]['pval_avg'].append(np.mean(pval_avgs))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (N=1000)
        if n == N_MAX:
            all_flips = [generator(N_MAX) for _ in range(NUM_TRIALS)]
            flat_flips = [bit for trial in all_flips for bit in trial]
            hist = calculate_histogram(flat_flips)
            histograms[name] = hist

print("\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω.")

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ ---
script_dir = os.path.dirname(os.path.abspath(__file__))
print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤: {script_dir}")

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
if SHOW_PLOT:
    x = list(range(1, N_MAX + 1))

    fig, axes = plt.subplots(4, 2, figsize=(18, 16))
    fig.suptitle(f'–ü–æ–ª–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ RNG (1‚Äì{N_MAX} –º–æ–Ω–µ—Ç)\n–£—Å—Ä–µ–¥–Ω–µ–Ω–æ –ø–æ {NUM_TRIALS} –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º', fontsize=18)

    # 1. –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ä–ª–∞)
    for name in generators:
        axes[0, 0].plot(x, results[name]['mean'], label=name, alpha=0.8)
    axes[0, 0].axhline(y=0.5, color='black', linestyle='--', linewidth=1.5, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ (0.5)')
    axes[0, 0].set_title('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (P(–æ—Ä—ë–ª))')
    axes[0, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[0, 0].set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ä–ª–∞')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)

    # 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5
    for name in generators:
        axes[0, 1].plot(x, results[name]['deviation'], label=name, alpha=0.8)
    axes[0, 1].set_title('–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5')
    axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[0, 1].set_ylabel('|mean - 0.5|')
    axes[0, 1].set_yscale('log')
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)

    # 3. Chi-square —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    for name in generators:
        axes[1, 0].plot(x, results[name]['chi2_stat'], label=name, alpha=0.8)
    axes[1, 0].set_title('Chi-square —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)')
    axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[1, 0].set_ylabel('œá¬≤')
    axes[1, 0].legend()
    axes[1, 0].grid(True, alpha=0.3)

    # 4. p-value —Ç–µ—Å—Ç–∞ œá¬≤
    for name in generators:
        axes[1, 1].plot(x, results[name]['p_value'], label=name, alpha=0.8)
    axes[1, 1].axhline(y=0.05, color='red', linestyle='--', label='Œ± = 0.05')
    axes[1, 1].set_title('p-value —Ç–µ—Å—Ç–∞ œá¬≤ (–≤—ã—à–µ 0.05 ‚Äî —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ)')
    axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[1, 1].set_ylabel('p-value')
    axes[1, 1].legend()
    axes[1, 1].grid(True, alpha=0.3)

    # 5. –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (—Å—Ä–µ–¥–Ω–µ–µ |r|)
    for name in generators:
        axes[2, 0].plot(x, results[name]['autocorr_avg'], label=name, alpha=0.8)
    axes[2, 0].set_title('–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–ø–æ 10 –ª–∞–≥–∞–º)')
    axes[2, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[2, 0].set_ylabel('Avg |autocorr|')
    axes[2, 0].legend()
    axes[2, 0].grid(True, alpha=0.3)

    # 6. p-value –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (Ljung-Box)
    for name in generators:
        axes[2, 1].plot(x, results[name]['pval_avg'], label=name, alpha=0.8)
    axes[2, 1].axhline(y=0.05, color='red', linestyle='--', label='Œ± = 0.05')
    axes[2, 1].set_title('–°—Ä–µ–¥–Ω–∏–π p-value –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (Ljung-Box)')
    axes[2, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[2, 1].set_ylabel('Avg p-value')
    axes[2, 1].legend()
    axes[2, 1].grid(True, alpha=0.3)

    # 7. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–¥–ª—è N=1000)
    labels = ['–û—Ä—ë–ª (0)', '–†–µ—à–∫–∞ (1)']
    x_pos = np.arange(len(labels))
    width = 0.2
    for i, (name, hist) in enumerate(histograms.items()):
        axes[3, 0].bar(x_pos + i*width, hist, width, label=name, alpha=0.8)
    axes[3, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 0/1 –ø—Ä–∏ N=1000 (—Å—É–º–º–∞—Ä–Ω–æ –∑–∞ 10√ó1000 –±—Ä–æ—Å–∫–æ–≤)')
    axes[3, 0].set_xlabel('–†–µ–∑—É–ª—å—Ç–∞—Ç')
    axes[3, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[3, 0].set_xticks(x_pos + width * 1.5)
    axes[3, 0].set_xticklabels(labels)
    axes[3, 0].legend()
    axes[3, 0].grid(True, axis='y', alpha=0.3)

    # 8. –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª—É—á—à–∏–º –∏ —Ö—É–¥—à–∏–º (TRNG vs PRNG)
    best_dev = min(results.keys(), key=lambda k: results[k]['deviation'][-1])
    worst_dev = max(results.keys(), key=lambda k: results[k]['deviation'][-1])
    diff = np.array(results[worst_dev]['deviation']) - np.array(results[best_dev]['deviation'])
    axes[3, 1].plot(x, diff, color='darkgreen', linewidth=2)
    axes[3, 1].axhline(y=0, color='black', linestyle='--')
    axes[3, 1].fill_between(x, diff, 0, where=(diff > 0), color='lightgreen', alpha=0.5, label=f'{worst_dev} —Ö—É–∂–µ\n—á–µ–º {best_dev}')
    axes[3, 1].fill_between(x, diff, 0, where=(diff < 0), color='red', alpha=0.3, label=f'{best_dev} –ª—É—á—à–µ')
    axes[3, 1].set_title(f'–†–∞–∑–Ω–∏—Ü–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: {worst_dev} ‚Äì {best_dev}\n(>0 = –ø–µ—Ä–≤—ã–π —Ö—É–∂–µ)')
    axes[3, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[3, 1].set_ylabel('Œî |mean - 0.5|')
    axes[3, 1].legend()
    axes[3, 1].grid(True, alpha=0.3)

    plt.tight_layout()

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ ---
    plot_filename = os.path.join(script_dir, "rng_full_comparison.png")
    plt.savefig(plot_filename, dpi=300, bbox_inches='tight')
    print(f"üíæ –ì–ª–∞–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {plot_filename}")

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏ ---
    subplot_titles = [
        "mean_probability",
        "deviation_from_0.5",
        "chi2_statistic",
        "p_value_chi2",
        "autocorrelation_avg",
        "autocorrelation_pvalue",
        "histogram_n1000",
        "difference_best_worst"
    ]

    for i, title in enumerate(subplot_titles):
        row, col = divmod(i, 2)
        ax = axes[row, col]
        fig_single, ax_single = plt.subplots(figsize=(8, 6))
        if title == "mean_probability":
            for name in generators:
                ax_single.plot(x, results[name]['mean'], label=name, alpha=0.8)
            ax_single.axhline(y=0.5, color='black', linestyle='--', linewidth=1.5)
        elif title == "deviation_from_0.5":
            for name in generators:
                ax_single.plot(x, results[name]['deviation'], label=name, alpha=0.8)
            ax_single.set_yscale('log')
        elif title == "chi2_statistic":
            for name in generators:
                ax_single.plot(x, results[name]['chi2_stat'], label=name, alpha=0.8)
        elif title == "p_value_chi2":
            for name in generators:
                ax_single.plot(x, results[name]['p_value'], label=name, alpha=0.8)
            ax_single.axhline(y=0.05, color='red', linestyle='--')
        elif title == "autocorrelation_avg":
            for name in generators:
                ax_single.plot(x, results[name]['autocorr_avg'], label=name, alpha=0.8)
        elif title == "autocorrelation_pvalue":
            for name in generators:
                ax_single.plot(x, results[name]['pval_avg'], label=name, alpha=0.8)
            ax_single.axhline(y=0.05, color='red', linestyle='--')
        elif title == "histogram_n1000":
            labels = ['–û—Ä—ë–ª (0)', '–†–µ—à–∫–∞ (1)']
            x_pos = np.arange(len(labels))
            width = 0.2
            for j, (name, hist) in enumerate(histograms.items()):
                ax_single.bar(x_pos + j*width, hist, width, label=name, alpha=0.8)
            ax_single.set_xticks(x_pos + width * 1.5)
            ax_single.set_xticklabels(labels)
        elif title == "difference_best_worst":
            ax_single.plot(x, diff, color='darkgreen', linewidth=2)
            ax_single.axhline(y=0, color='black', linestyle='--')
            ax_single.fill_between(x, diff, 0, where=(diff > 0), color='lightgreen', alpha=0.5)
            ax_single.fill_between(x, diff, 0, where=(diff < 0), color='red', alpha=0.3)

        ax_single.set_title(title.replace('_', ' ').title())
        ax_single.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
        ax_single.set_ylabel(ax.get_ylabel())
        ax_single.legend()
        ax_single.grid(True, alpha=0.3)
        plt.tight_layout()

        single_filename = os.path.join(script_dir, f"rng_{title}.png")
        plt.savefig(single_filename, dpi=200, bbox_inches='tight')
        print(f"üíæ –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ '{title}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {single_filename}")
        plt.close(fig_single)

    plt.show()

# --- –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã ---
print("\n" + "="*80)
print("üìà –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ (–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó)")
print("="*80)

final_results = {}
for name in generators:
    final_dev = results[name]['deviation'][-1]
    final_pval = np.mean(results[name]['p_value'][-10:])
    final_acorr = np.mean(results[name]['autocorr_avg'][-10:])
    final_acorr_pval = np.mean(results[name]['pval_avg'][-10:])
    final_results[name] = {
        'deviation': final_dev,
        'p_value': final_pval,
        'autocorr_avg': final_acorr,
        'acorr_pval': final_acorr_pval
    }
    print(f"\n{name}:")
    print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5: {final_dev:.6f}")
    print(f"  p-value (œá¬≤): {final_pval:.4f} ‚Üí {'‚úì –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ' if final_pval > 0.05 else '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ'}")
    print(f"  –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {final_acorr:.4f} (—Å—Ä–µ–¥–Ω–µ–µ |r|)")
    print(f"  p-value –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {final_acorr_pval:.4f} ‚Üí {'‚úì –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å' if final_acorr_pval > 0.05 else '‚ö†Ô∏è –ï—Å—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è!'}")

# –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π
best_name = min(final_results.keys(), key=lambda k: final_results[k]['deviation'])
worst_name = max(final_results.keys(), key=lambda k: final_results[k]['deviation'])

print(f"\nüèÜ –õ–£–ß–®–ò–ô –ì–ï–ù–ï–†–ê–¢–û–†: {best_name} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {final_results[best_name]['deviation']:.6f})")
print(f"üìâ –•–£–î–®–ò–ô –ì–ï–ù–ï–†–ê–¢–û–†: {worst_name} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {final_results[worst_name]['deviation']:.6f})")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
correlated = [name for name, res in final_results.items() if res['acorr_pval'] <= 0.05]
if correlated:
    print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: —Å–ª–µ–¥—É—é—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—É—é –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é:")
    for name in correlated:
        print(f"   - {name} (p-value –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ = {final_results[name]['acorr_pval']:.4f})")

print(f"\nüìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è N=1000 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞—é—Ç ~50%/50% ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
print(f"üí° –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–µ—Å—Ç –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å (œá¬≤), –Ω–æ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚Äî –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä!")

print("\nüí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("‚Ä¢ –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ö–æ—Ä–æ—à–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö N (>100).")
print("‚Ä¢ `secrets` –∏ `os.urandom` ‚Äî –ª—É—á—à–∏–µ –ø–æ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏.")
print("‚Ä¢ `numpy.random` ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π PRNG –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–æ –Ω–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
print("‚Ä¢ `random` ‚Äî —Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏ —Å–ª–∞–±—ã–π –ø–æ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –º–∞–ª—ã—Ö N).")
print("‚Ä¢ üîí –î–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û `secrets` –∏–ª–∏ `os.urandom`.")
print("‚Ä¢ üìä –î–ª—è —Å–∏–º—É–ª—è—Ü–∏–π: `numpy.random` ‚Äî –∏–¥–µ–∞–ª–µ–Ω.")
print("‚Ä¢ ‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ `random` –≤ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö ‚Äî –æ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π.")
# 1) unitest