import os
import random
import secrets
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chisquare
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
N_MAX = 1000          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (1..1000)
NUM_TRIALS = 10       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (—á—Ç–æ–±—ã —Å–≥–ª–∞–¥–∏—Ç—å —à—É–º)
SHOW_PLOT = True      # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
SAVE_PLOT = False     # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª

print("üöÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ PRNG (random) –∏ TRNG (secrets) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç...")
print(f"–ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç—ã –æ—Ç 1 –¥–æ {N_MAX} —à—Ç—É–∫, {NUM_TRIALS} –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∫–∞–∂–¥–∞—è.\n")

# --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ---
def prng_flip(n):
    """PRNG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python random"""
    return [random.randint(0, 1) for _ in range(n)]

def trng_flip(n):
    """TRNG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç secrets.token_bytes() + –±–∏—Ç—ã"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç
    n_bytes = (n + 7) // 8  # –°–∫–æ–ª—å–∫–æ –±–∞–π—Ç –Ω—É–∂–Ω–æ
    bytes_data = secrets.token_bytes(n_bytes)
    bits = []
    for byte in bytes_data:
        for i in range(8):
            if len(bits) >= n:
                break
            bits.append((byte >> i) & 1)
    return bits[:n]

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ---
def calculate_stats(flips):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Å—Å–∏–≤—É –±—Ä–æ—Å–∫–æ–≤ (0=–æ—Ä—ë–ª, 1=—Ä–µ—à–∫–∞)"""
    flips = np.array(flips)
    mean = np.mean(flips)  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ä–ª–∞
    std = np.std(flips)
    chi2_stat, p_val = chisquare([np.sum(flips == 0), np.sum(flips == 1)])  # –û—Ä—ë–ª vs –†–µ—à–∫–∞
    deviation = abs(mean - 0.5)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5
    return {
        'mean': mean,
        'std': std,
        'chi2_stat': chi2_stat,
        'p_value': p_val,
        'deviation': deviation
    }

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
results_prng = {'mean': [], 'std': [], 'deviation': [], 'chi2_stat': [], 'p_value': []}
results_trng = {'mean': [], 'std': [], 'deviation': [], 'chi2_stat': [], 'p_value': []}

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç –æ—Ç 1 –¥–æ N_MAX
for n in range(1, N_MAX + 1):
    if n % 100 == 0:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {n}/{N_MAX}...")

    prng_means = []
    trng_means = []
    prng_deviations = []
    trng_deviations = []
    prng_chi2 = []
    trng_chi2 = []
    prng_pvals = []
    trng_pvals = []

    # NUM_TRIALS –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    for _ in range(NUM_TRIALS):
        # PRNG
        flips_prng = prng_flip(n)
        stats_prng = calculate_stats(flips_prng)
        prng_means.append(stats_prng['mean'])
        prng_deviations.append(stats_prng['deviation'])
        prng_chi2.append(stats_prng['chi2_stat'])
        prng_pvals.append(stats_prng['p_value'])

        # TRNG
        flips_trng = trng_flip(n)
        stats_trng = calculate_stats(flips_trng)
        trng_means.append(stats_trng['mean'])
        trng_deviations.append(stats_trng['deviation'])
        trng_chi2.append(stats_trng['chi2_stat'])
        trng_pvals.append(stats_trng['p_value'])

    # –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ NUM_TRIALS
    results_prng['mean'].append(np.mean(prng_means))
    results_prng['std'].append(np.mean(prng_deviations))  # –ó–¥–µ—Å—å std ‚Äî —ç—Ç–æ std –æ—Ç mean, –Ω–æ –º—ã —Ö–æ—Ç–∏–º deviation
    results_prng['deviation'].append(np.mean(prng_deviations))
    results_prng['chi2_stat'].append(np.mean(prng_chi2))
    results_prng['p_value'].append(np.mean(prng_pvals))

    results_trng['mean'].append(np.mean(trng_means))
    results_trng['std'].append(np.mean(trng_deviations))
    results_trng['deviation'].append(np.mean(trng_deviations))
    results_trng['chi2_stat'].append(np.mean(trng_chi2))
    results_trng['p_value'].append(np.mean(trng_pvals))

print("\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω.")

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
if SHOW_PLOT:
    x = list(range(1, N_MAX + 1))

    fig, axes = plt.subplots(3, 2, figsize=(16, 12))
    fig.suptitle(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ PRNG (random) –∏ TRNG (secrets) –ø—Ä–∏ –±—Ä–æ—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç (1‚Äì{N_MAX})\n'
                 f'–£—Å—Ä–µ–¥–Ω–µ–Ω–æ –ø–æ {NUM_TRIALS} –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º', fontsize=16)

    # 1. –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ä–ª–∞)
    axes[0, 0].plot(x, results_prng['mean'], label='PRNG (random)', color='blue', alpha=0.7)
    axes[0, 0].plot(x, results_trng['mean'], label='TRNG (secrets)', color='red', alpha=0.7)
    axes[0, 0].axhline(y=0.5, color='black', linestyle='--', label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ (0.5)')
    axes[0, 0].set_title('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (P(–æ—Ä—ë–ª))')
    axes[0, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[0, 0].set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ä–ª–∞')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)

    # 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5
    axes[0, 1].plot(x, results_prng['deviation'], label='PRNG', color='blue', alpha=0.7)
    axes[0, 1].plot(x, results_trng['deviation'], label='TRNG', color='red', alpha=0.7)
    axes[0, 1].set_title('–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 0.5')
    axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[0, 1].set_ylabel('|mean - 0.5|')
    axes[0, 1].set_yscale('log')  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ ‚Äî –ª—É—á—à–µ –≤–∏–¥–Ω–æ —Ä–∞–∑–Ω–∏—Ü—É
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)

    # 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Ä–∞–∑–±—Ä–æ—Å)
    axes[1, 0].plot(x, results_prng['std'], label='PRNG', color='blue', alpha=0.7)
    axes[1, 0].plot(x, results_trng['std'], label='TRNG', color='red', alpha=0.7)
    axes[1, 0].set_title('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Ä–∞–∑–±—Ä–æ—Å)')
    axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[1, 0].set_ylabel('Std')
    axes[1, 0].legend()
    axes[1, 0].grid(True, alpha=0.3)

    # 4. Chi-square —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ)
    axes[1, 1].plot(x, results_prng['chi2_stat'], label='PRNG', color='blue', alpha=0.7)
    axes[1, 1].plot(x, results_trng['chi2_stat'], label='TRNG', color='red', alpha=0.7)
    axes[1, 1].set_title('Chi-square —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–µ–Ω—å—à–µ = –±–ª–∏–∂–µ –∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏)')
    axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[1, 1].set_ylabel('œá¬≤')
    axes[1, 1].legend()
    axes[1, 1].grid(True, alpha=0.3)

    # 5. p-value (–≤—ã—à–µ 0.05 ‚Äî –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏)
    axes[2, 0].plot(x, results_prng['p_value'], label='PRNG', color='blue', alpha=0.7)
    axes[2, 0].plot(x, results_trng['p_value'], label='TRNG', color='red', alpha=0.7)
    axes[2, 0].axhline(y=0.05, color='green', linestyle='--', label='Œ± = 0.05')
    axes[2, 0].set_title('p-value —Ç–µ—Å—Ç–∞ œá¬≤ (–≤—ã—à–µ 0.05 ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ)')
    axes[2, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[2, 0].set_ylabel('p-value')
    axes[2, 0].legend()
    axes[2, 0].grid(True, alpha=0.3)

    # 6. –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É PRNG –∏ TRNG (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    diff_dev = np.array(results_prng['deviation']) - np.array(results_trng['deviation'])
    axes[2, 1].plot(x, diff_dev, color='purple', linewidth=1.5)
    axes[2, 1].axhline(y=0, color='black', linestyle='--')
    axes[2, 1].fill_between(x, diff_dev, 0, where=(diff_dev > 0), color='purple', alpha=0.2, label='PRNG —Ö—É–∂–µ')
    axes[2, 1].fill_between(x, diff_dev, 0, where=(diff_dev < 0), color='green', alpha=0.2, label='TRNG –ª—É—á—à–µ')
    axes[2, 1].set_title('–†–∞–∑–Ω–∏—Ü–∞ –≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: PRNG - TRNG\n(>0 = PRNG —Ö—É–∂–µ)')
    axes[2, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
    axes[2, 1].set_ylabel('Œî |mean - 0.5|')
    axes[2, 1].legend()
    axes[2, 1].grid(True, alpha=0.3)

    plt.tight_layout()

    if SAVE_PLOT:
        plt.savefig('rng_coin_comparison.png', dpi=300, bbox_inches='tight')
        print("üíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ 'rng_coin_comparison.png'")

    plt.show()

# --- –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã ---
print("\n" + "="*70)
print("üìà –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´")
print("="*70)

final_prng_dev = results_prng['deviation'][-1]
final_trng_dev = results_trng['deviation'][-1]
prng_pval_avg = np.mean(results_prng['p_value'][-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫
trng_pval_avg = np.mean(results_trng['p_value'][-10:])

print(f"–ü—Ä–∏ {N_MAX} –º–æ–Ω–µ—Ç–∞—Ö:")
print(f"  PRNG –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {final_prng_dev:.6f}")
print(f"  TRNG –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {final_trng_dev:.6f}")
print(f"  –†–∞–∑–Ω–∏—Ü–∞: {final_prng_dev - final_trng_dev:.6f} (TRNG –ª—É—á—à–µ –Ω–∞ {abs(final_prng_dev - final_trng_dev):.6f})")

print(f"\n–°—Ä–µ–¥–Ω–∏–π p-value (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫):")
print(f"  PRNG: {prng_pval_avg:.4f} ‚Üí {'‚úì –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ' if prng_pval_avg > 0.05 else '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ'}")
print(f"  TRNG: {trng_pval_avg:.4f} ‚Üí {'‚úì –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ' if trng_pval_avg > 0.05 else '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ'}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ TRNG –±—ã–ª –ª—É—á—à–µ?
better_count = sum(1 for p, t in zip(results_prng['deviation'], results_trng['deviation']) if t < p)
print(f"\nTRNG –±—ã–ª –ª—É—á—à–µ (–º–µ–Ω—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è) –≤ {better_count}/{N_MAX} —Å–ª—É—á–∞—è—Ö ({better_count/N_MAX:.1%})")

print("\nüí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("‚Ä¢ –û–±–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ö–æ–¥—è—Ç—Å—è –∫ 0.5 –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –±—Ä–æ—Å–∫–æ–≤.")
print("‚Ä¢ TRNG (secrets) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—É—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –º–∞–ª—ã—Ö N.")
print("‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –Ω–µ–±–æ–ª—å—à–∞—è, –Ω–æ TRNG –Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.")
print("‚Ä¢ –ü—Ä–∏ N > 100 –æ–±–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö–æ—Ä–æ—à–æ ‚Äî PRNG —Ç–æ–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à!")